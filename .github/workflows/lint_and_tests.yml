name: CI/CD Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Analysing the code with pylint
        run: |
          pip install pylint
          pylint $(git ls-files '*.py') |
          tee pylint.txt
      - name: Upload pylint.txt as artifact
        uses: actions/upload-artifact@v3
        with:
          name: Pylint Analysis
          path: pylint.txt

      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff --format=github --target-version=py37 .
        continue-on-error: true

      - name: Run MyPy
        run: |
          pip install mypy
          mypy . | tee mypy.txt

      - name: MyPy Annotations
        run: |
          # Read the contents of mypy.txt
          mypy_output=$(cat mypy.txt)

          # Split the mypy output into lines and process each line
          IFS=$'\n'
          for line in $mypy_output; do
            # Check if the line contains an error, note, or warning message
            if [[ $line == *"error:"* || $line == *"note:"* || $line == *"warning:"* ]]; then
              # Extract file, line, and message content
              file=$(echo "$line" | cut -d ':' -f 1)
              line_number=$(echo "$line" | cut -d ':' -f 2)
              message=$(echo "$line" | cut -d ':' -f 3-)

              # Determine the annotation type (error, note, or warning)
              annotation_type=""
              if [[ $line == *"error:"* ]]; then
                annotation_type="error"
              elif [[ $line == *"note:"* ]]; then
                annotation_type="notice"
              elif [[ $line == *"warning:"* ]]; then
                annotation_type="warning"
              fi

              # Check if the message ends with [error_type]
              if [[ $message == *" [error_type]" ]]; then
                # Remove [error_type] from the message
                message=$(echo "$message" | sed 's/\[error_type\]//')
                # Create GitHub annotation with the custom format
                echo "::${annotation_type} file=${file},line=${line_number},title=MYPY [error_type]::${message}"
              else
                # Create GitHub annotation without [error_type] in the title
                echo "::${annotation_type} file=${file},line=${line_number},title=MYPY ::${message}"
              fi
            fi
          done
        continue-on-error: true

      - name: Archive MyPy output
        uses: actions/upload-artifact@v3
        with:
          name: MyPy Analysis
          path: mypy.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Test with pytest
        run: |
          pip install pytest
          python -m pytest test/ --junitxml=pytest_report.xml

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: Pytest Analysis
          path: pytest_report.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}